print("n = 11")
print(mse_sm)
print(mse_mle)
?Binomial
geom_data_two <- rbinom(10^5, 150, 1/5)
geom_data_n <- (30000)/(geom_data_two)
geom_data_two <- rbinom(10^5, 150, 1/5)
geom_data_n <- (30000)/(geom_data_two)
bias_bin <- mean(geom_data_n) - qbinom(0.5, 150, 1/5)
se_bin <- (var(geom_data_n))^(0.5)
mse_bin <- bias_bin^2 + variance_bin
mse_bin <- bias_bin^2 + se_bin^2
mse_bin
geom_data_two <- rbinom(10^5, 150, 1/5)
geom_data_two
geom_data_n <- (30000)/(geom_data_two)
geom_data_n
qbinom(0.5, 150, 1/5)
geom_data_two
geom_data_two <- rbinom(10^5, 150, 1/5)
geom_data_n <- (30000)/(geom_data_two)
bias_bin <- mean(geom_data_n) - 1000
se_bin <- (var(geom_data_n))^(0.5)
mse_bin <- bias_bin^2 + se_bin^2
mse_bin
geom_data_n <- (30000)/(geom_data_two)
geom_data_n
bias_bin <- mean(geom_data_n) - 1000
bias_bin
geom_data_two <- rbinom(10^5, 150, 1/5)
geom_data_n <- (30000)/(geom_data_two)
bias_bin <- mean(geom_data_n) - 1000
se_bin <- (var(geom_data_n))^(0.5)
mse_bin <- bias_bin^2 + se_bin^2
mse_bin
bias_bin
se_bin
theta <- qweibull(0.5, 1.11, 3^(-1/1.11))
median_mle <- function(n) {
for(x in range) {
# Sample Median
weibull <- rweibull(n, 1.11, 3^(-1/1.11))
median_v <- c(median_v, median(weibull))
# MLE
weibull_mle <- weibull^(1.11)
mle_v <- c(mle_v, (log(2) * (sum(weibull_mle)/n))^(1/3))
}
# MSE for SM and MLE
bias_sm <- (mean(median_v) - theta)
variance_sm <- var(median_v)
mse_sm <- bias_sm^2 + variance_sm
bias_mle <- (mean(mle_v) - theta)
variance_mle <- var(mle_v)
mse_mle <- bias_mle^2 + variance_mle
print(n)
print(mse_sm)
print(mse_mle)
}
median_mle(11)
coverage <- 1.96(200/(1/5)^2)((1/5)(4/5))^(.5)
coverage <- 1.96* (200/((1/5)^2))*((1/5)*(4/5))^(.5)
coverage
geom_data <- rhyper(3, 200, 800, 150)
n_range <- seq(800, 1200, 1)
n_one <- data.frame(x = n_range, y = dhyper(geom_data[1], 200, n_range - 200, 150))
ggplot() + geom_line(data=n_one, mapping=aes(x = x, y=y))
n_range <- seq(800, 1200, 1)
n_one <- data.frame(x = n_range, y = dhyper(geom_data[1], 200, n_range - 200, 150))
ggplot() + geom_line(data=n_one, mapping=aes(x = x, y=y)) + ggtitle("First Run")
n_two <- data.frame(x = n_range, y = dhyper(geom_data[2], 200, n_range - 200, 150))
ggplot() + geom_line(data=n_two, mapping=aes(x = x, y=y)) + ggtitle("Second Run")
n_three <- data.frame(x = n_range, y = dhyper(geom_data[3], 200, n_range - 200, 150))
ggplot() + geom_line(data=n_three, mapping=aes(x = x, y=y)) + ggtitle("Third Run")
ggplot() + geom_line(data=n_two, mapping=aes(x = x, y=y)) + ggtitle("Second Run")
ggplot() + geom_line(data=n_one, mapping=aes(x = x, y=y)) + ggtitle("First Run")
?Binomial
rbinom(3, 10, 1/10)
rbinom(3, 10, 1/10)
rbinom(3, 10, 1/10)
rbinom(3, 10, 1/10)
rbinom(3, 10, 1/10)
rbinom(3, 10, 1/10)
rbinom(3, 10, 1/10)
rbinom(3, 10, 1/10)
rbinom(3, 10, 1/10)
rbinom(3, 3, 1/10)
rbinom(3, 3, 1/10)
rbinom(3, 3, 1/10)
rbinom(3, 10, 1)
sample(3, 10)
?sample
sample(10, 3)
sample(10, 3)
sample(10, 3)
sample(10, 3)
sample(10, 3)
sample(10, 3)
sample(10, 3)
sample(10, 3)
sample(10, 3)
area_random <- (row_random)/55
row_random <- sample(10, 3)
area_random <- (row_random)/55
area_random
area_random <- sum((row_random)/55)
area_random
range <- seq(1,10,1)
range
row_random <- sample(10, 3)
area_random <- sum((row_random)/55)
range <- seq(1,10,1)
indictor_random <- c()
for(i in range) {
if(row_random[1] %in% range || row_random[2] %in% range || row_random[3] %in% range) {
indictor_random <- c(indictor_random, 1)
}
else {
indictor_random <- c(indictor_random, 0)
}
}
indictor_random
for(i in range) {
if(row_random[1] == i || row_random[2] == i || row_random[3] == i) {
indictor_random <- c(indictor_random, 1)
}
else {
indictor_random <- c(indictor_random, 0)
}
}
indictor_random
indictor_random <- c()
row_random <- sample(10, 3)
area_random <- (row_random)/55
range <- seq(1,10,1)
indictor_random <- c()
for(i in range) {
if(row_random[1] == i || row_random[2] == i || row_random[3] == i) {
indictor_random <- c(indictor_random, 1)
}
else {
indictor_random <- c(indictor_random, 0)
}
}
# from problem 4f, N curl is unbiased
bias_ncurl <- 0
se_ncurl <- ((1000)^2)*var(sum(indictor_random/area_random))
mse_ncurl <- bias_ncurl^2 + se_ncurl^2
area_random
row_random <- sample(10, 3)
area_random <- (row_random)/55
range <- seq(1,10,1)
indictor_random <- c()
for(i in range) {
counter <- 1
if(row_random[1] == i || row_random[2] == i || row_random[3] == i) {
indictor_random <- c(indictor_random, 1/area_random[counter])
counter <- counter + 1
}
else {
indictor_random <- c(indictor_random, 0)
}
}
# from problem 4f, N curl is unbiased
bias_ncurl <- 0
se_ncurl <- ((1000)^2)*var(sum(indictor_random/area_random))
mse_ncurl <- bias_ncurl^2 + se_ncurl^2
row_random <- sample(10, 3)
area_random <- (row_random)/55
range <- seq(1,10,1)
indicator_random <- c()
for(i in range) {
counter <- 1
if(row_random[1] == i || row_random[2] == i || row_random[3] == i) {
indicator_random <- c(indicator_random, 1/area_random[counter])
counter <- counter + 1
}
else {
indicator_random <- c(indicator_random, 0)
}
}
# from problem 4f, N curl is unbiased
bias_ncurl <- 0
se_ncurl <- ((1000)^2)*var(sum(indicator_random))
mse_ncurl <- bias_ncurl^2 + se_ncurl^2
mse_ncurl
se_ncurl
bias_ncurl
((1000)^2)*var(sum(indicator_random))
indicator_random
sum(indicator_random)
bias_ncurl <- 0
se_ncurl <- ((1000)^2)*(sum(var(indicator_random)))
mse_ncurl <- bias_ncurl^2 + se_ncurl^2
se_ncurl
mse_ncurl
rbinom(3, 1000, sum(area_random))
sum(area_random)
qnorm(.05)
qnorm(.025)
prop.test(c(37, 50),c(76,133))
library(dplyr)
install.packages("dplyr")
tidyverse
install.packages("tidyverse")
batting = read.csv("data/mlb_batting_data.csv")
batting = read.csv("data/county_level_cancer.csv")
cancer = read.csv("data/county_level_cancer.csv")
batting = read.csv("data/mlb_batting_data.csv")
cancer = read.csv("data/county_level_cancer.csv")
# forward model
interceptmodel <- lm(cancer ~ 1, data = cancer)
fullmodel <- lm(cancer ~., data = cancer)
forwardmodel = step(interceptmodel, scope = formula(fullmodel), direction="forward", k=2, trace=0)
formula(forwardmodel)
# backward model
backwardmodel = step(fullmodel, direction = "backward", trace = 0)
formula(backwardmodel)
# stepwise model
stepwisemodel = step(interceptmodel, scope=list(lower = formula(interceptmodel), upper = formula(fullmodel)), direction = "both", trace = 0)
formula(stepwisemodel)
AIC(model1, forwardmodel, backwardmodel, stepwisemodel)
AIC(forwardmodel, backwardmodel, stepwisemodel)
unique_county = length(unique(cancer$county))
unique_county = length(unique(cancer$county))
unique_county
lapply(cancer[1:ncol(cancer)], FUN=hist)
lapply(cancer[1:ncol(cancer)], FUN=hist)
ncol(cancer)
lapply(cancer[1:ncol(cancer)-1], FUN=hist)
cancer[1:ncol(cancer)]
col = seq(1, 15, by =1)
lapply(cancer[1:ncol(cancer)], FUN=hist)
col = seq(1, 15, by =1)
#lapply(cancer[1:ncol(cancer)], FUN=hist)
hist(mtcars[,col])
col = seq(1, 15, by =1)
#lapply(cancer[1:ncol(cancer)], FUN=hist)
hist(mtcars[,col-1])
col = seq(1, 15, by =1)
#lapply(cancer[1:ncol(cancer)], FUN=hist)
hist(cancer[,col])
col = seq(1, 15, by =1)
#lapply(cancer[1:ncol(cancer)], FUN=hist)
hist(as.numeric(cancer[,col]))
library(reshape2)
library(ggplot2)
gg <- melt(cancer)
ggplot(gg, aes(x=value, fill=variable)) +
geom_histogram(binwidth=10)+
facet_grid(variable~.)
cancer = read.csv("data/county_level_cancer.csv")
drops <- c("fipscode")
cancer = cancer[ , !(names(cancer) %in% drops)]
cancer$state = as.factor(cancer$state)
cancer$county = as.factor(cancer$county)
drops <- c("fipscode")
cancer = cancer[ , !(names(cancer) %in% drops)]
cancer$state = as.factor(cancer$state)
cancer$county = as.factor(cancer$county)
drops <- c("fipscode")
cancer = cancer[ , !(names(cancer) %in% drops)]
cancer$state = as.factor(cancer$state)
cancer$county = as.factor(cancer$county)
drops <- c("fipscode")
cancer = cancer[ , !(names(cancer) %in% drops)]
drops <- c("fipscode")
cancer = cancer[ , !(names(cancer) %in% drops)]
cancer$state = as.factor(cancer$state)
cancer$county = as.factor(cancer$county)
cancer = read.csv("data/county_level_cancer.csv")
drops <- c("fipscode")
cancer = cancer[ , !(names(cancer) %in% drops)]
cancer$state = as.factor(cancer$state)
cancer$county = as.factor(cancer$county)
model1 = lm(cancer ~ inactivity, data = cancer)
summary(model1)
# forward model
interceptmodel <- lm(cancer ~ 1, data = cancer)
fullmodel <- lm(cancer ~., data = cancer)
forwardmodel = step(interceptmodel, scope = formula(fullmodel), direction="forward", k=2, trace=0)
formula(forwardmodel)
RMSE = function(y,yhat){
SSE = sum((y-yhat)^2)
return(sqrt(SSE/length(y)))
}
# test for histograms
hist(cancer$state)
# test for histograms
hist(cancer$population)
# test for histograms
hist(log(cancer$population)
# test for histograms
hist(log(cancer$population))
# test for histograms
# log transform population
hist(cancer$population <- log(cancer$population))
# test for histograms
# log transform population
hist(cancer$population <- log(cancer$population))
hist(cancer$hispanic <- cancer$hispanic)
hist(cancer$minority <- cancer$minority)
hist(cancer$female <- cancer$female)
hist(cancer$unemployed <- cancer$unemployed)
hist(cancer$income <- cancer$income)
hist(cancer$nodegree <- cancer$nodegree)
hist(cancer$bachelor <- cancer$bachelor)
hist(cancer$inactivity <- cancer$inactivity)
hist(cancer$obesity <- cancer$obesity)
hist(cancer$density <- cancer$density)
# test for histograms
# log transform population
hist(cancer$population <- log(cancer$population))
hist(cancer$hispanic <- cancer$hispanic)
hist(cancer$minority <- cancer$minority)
hist(cancer$female <- cancer$female)
hist(cancer$unemployed <- cancer$unemployed)
hist(cancer$income <- cancer$income)
hist(cancer$nodegree <- cancer$nodegree)
hist(cancer$bachelor <- cancer$bachelor)
hist(cancer$inactivity <- cancer$inactivity)
hist(cancer$obesity <- cancer$obesity)
hist(cancer$density <- log(cancer$density))
# test for histograms
# log transform population, hispanic, minority, density
hist(cancer$population <- log(cancer$population))
hist(cancer$hispanic <- log(cancer$hispanic))
hist(cancer$minority <- log(cancer$minority))
hist(cancer$female <- cancer$female)
hist(cancer$unemployed <- cancer$unemployed)
hist(cancer$income <- cancer$income)
hist(cancer$nodegree <- cancer$nodegree)
hist(cancer$bachelor <- cancer$bachelor)
hist(cancer$inactivity <- cancer$inactivity)
hist(cancer$obesity <- cancer$obesity)
hist(cancer$density <- log(cancer$density))
# test for histograms
# log transform population, hispanic, minority, density
hist(cancer$population <- log(cancer$population))
hist(cancer$hispanic <- log(cancer$hispanic))
hist(cancer$minority <- log(cancer$minority))
hist(cancer$female <- cancer$female)
hist(cancer$unemployed <- cancer$unemployed)
hist(cancer$income <- cancer$income)
hist(cancer$nodegree <- cancer$nodegree)
hist(cancer$bachelor <- cancer$bachelor)
hist(cancer$inactivity <- cancer$inactivity)
hist(cancer$obesity <- cancer$obesity)
hist(cancer$density <- log(cancer$density))
cancer = read.csv("data/county_level_cancer.csv")
RMSE = function(y,yhat){
SSE = sum((y - yhat)^2)
return(sqrt(SSE/length(y)))
}
drops <- c("fipscode")
cancer = cancer[ , !(names(cancer) %in% drops)]
cancer$state = as.factor(cancer$state)
cancer$county = as.factor(cancer$county)
# test for histograms
# log transform population, hispanic, minority, density
hist(cancer$population <- log(cancer$population))
hist(cancer$hispanic <- log(cancer$hispanic))
hist(cancer$minority <- log(cancer$minority))
hist(cancer$female <- cancer$female)
hist(cancer$unemployed <- cancer$unemployed)
hist(cancer$income <- cancer$income)
hist(cancer$nodegree <- cancer$nodegree)
hist(cancer$bachelor <- cancer$bachelor)
hist(cancer$inactivity <- cancer$inactivity)
hist(cancer$obesity <- cancer$obesity)
hist(cancer$density <- log(cancer$density))
# fit the intercept and the full model
interceptmodel <- lm(cancer ~ 1, data = cancer)
fullmodel <- lm(cancer ~., data = cancer)
summary(fullmodel)
library(lme4)
cancer_mm = lmer(cancer ~ inactivity | county), data=cancer))
library(lme4)
cancer_mm = lmer(cancer ~ inactivity | county, data=cancer)
cancer = read.csv("data/county_level_cancer.csv")
library(lme4)
cancer_mm = lmer(cancer ~ inactivity | county, data=cancer)
cancer = read.csv("data/county_level_cancer.csv")
library(lme4)
cancer_mm = lmer(cancer ~ inactivity | county, data=cancer)
RMSE = function(y,yhat){
SSE = sum((y - yhat)^2)
return(sqrt(SSE/length(y)))
}
drops <- c("fipscode")
cancer = cancer[ , !(names(cancer) %in% drops)]
cancer$state = as.factor(cancer$state)
cancer$county = as.factor(cancer$county)
# test for histograms
# log transform population, hispanic, minority, density
hist(cancer$population <- log(cancer$population))
hist(cancer$hispanic <- log(cancer$hispanic))
hist(cancer$minority <- log(cancer$minority))
hist(cancer$female <- cancer$female)
hist(cancer$unemployed <- cancer$unemployed)
hist(cancer$income <- cancer$income)
hist(cancer$nodegree <- cancer$nodegree)
hist(cancer$bachelor <- cancer$bachelor)
hist(cancer$inactivity <- cancer$inactivity)
hist(cancer$obesity <- cancer$obesity)
hist(cancer$density <- log(cancer$density))
model1 = lm(cancer ~ inactivity, data = cancer)
summary(model1)
# fit the intercept and the full model
interceptmodel <- lm(cancer ~ 1, data = cancer)
fullmodel <- lm(cancer ~., data = cancer)
# summary(fullmodel)
library(tidyverse)
flights_residuals = cbind(cancer, resid = resid(model1), fitted = fitted(model1))
View(flights_residuals)
cancer_residuals = cbind(cancer, resid = resid(model1), fitted = fitted(model1))
cancer_residuals = cbind(cancer, resid = resid(model1), fitted = fitted(model1))
# boxplot for carriers
cancer_residuals %>%
group_by(county) %>%
summarise(mean_res = mean(resid)) %>%
ggplot(cancer, mapping = aes(x = county, y = mean_res))
cancer_residuals = cbind(cancer, resid = resid(model1), fitted = fitted(model1))
# boxplot for carriers
cancer_residuals %>%
group_by(county) %>%
summarise(mean_res = mean(resid)) %>%
cancer_residuals = cbind(cancer, resid = resid(model1), fitted = fitted(model1))
# boxplot for carriers
cancer_residuals %>%
group_by(county) %>%
summarise(mean_res = mean(resid))
cancer_residuals = cbind(cancer, resid = resid(model1), fitted = fitted(model1))
# boxplot for carriers
cancer_residuals %>%
group_by(county) %>%
summarise(mean_res = mean(resid)) %>%
ggplot(cancer, mapping = aes(x = county, y = mean_res)) +
geom_bar(stat="identity")
qqplot(mean_res)
cancer_residuals = cbind(cancer, resid = resid(model1), fitted = fitted(model1))
# boxplot for carriers
cancer_residuals %>%
group_by(county) %>%
summarise(mean_res <- mean(resid)) %>%
ggplot(cancer, mapping = aes(x = county, y = mean_res)) +
geom_bar(stat="identity")
cancer_residuals = cbind(cancer, resid = resid(model1), fitted = fitted(model1))
# boxplot for carriers
cancer_residuals %>%
group_by(county) %>%
summarise(mean_res <- mean(resid)) %>%
ggplot(cancer, mapping = aes(x = county, y = mean_res)) +
geom_bar(stat="identity")
library(tidyverse)
cancer_residuals = cbind(cancer, resid = resid(model1), fitted = fitted(model1))
# boxplot for carriers
cancer_residuals %>%
group_by(county) %>%
summarise(mean_res <- mean(resid)) %>%
ggplot(cancer, mapping = aes(x = county, y = mean_res)) +
geom_bar(stat="identity")
cancer_residuals = cbind(cancer, resid = resid(model1), fitted = fitted(model1))
# boxplot for carriers
cancer_residuals %>%
group_by(county) %>%
summarise(mean_res = mean(resid)) %>%
ggplot(cancer, mapping = aes(x = county, y = mean_res)) +
geom_bar(stat="identity")
qqplot(mean(resid))
qqplot(model1$residuals)
qqnorm(model1$residuals)
library(glmnet)
install.packages("glmnet")
install.packages("glmnet")
R.version.string
install.packages('glmnet',repos='http://cran.us.r-project.org')
library(glmnet)
ridges = cv.glmnet(cancer, cancer$cancer, alpha = 0)
install.packages("glmnet", dependencies=TRUE)
# check assumptions
cancer_residuals = cbind(cancer, resid = resid(model1), fitted = fitted(model1))
qqnorm(model1$residuals)
install.packages(c("assertthat", "backports", "boot", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "curl", "devtools", "digest", "evaluate", "foreach", "foreign", "fs", "ggplot2", "git2r", "glue", "gtable", "haven", "htmltools", "httr", "iterators", "KernSmooth", "knitr", "lazyeval", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "openssl", "openxlsx", "pbapply", "pillar", "pkgbuild", "pkgconfig", "processx", "purrr", "R6", "rcmdcheck", "Rcpp", "remotes", "rlang", "rmarkdown", "rpart", "rvest", "scales", "selectr", "SimDesign", "stringi", "stringr", "survival", "sys", "testthat", "tidyverse", "tinytex", "usethis", "VGAM", "whisker", "xfun", "zip"))
install.packages("glmnet", dependencies=TRUE)
get_newprop
# Jess, Anna and Seth Project
# 11/29/19
setwd("stat139finalproject/") # for jess only
source('styleguide.R')
source('helpers.R')
source('cleaner.R')
# Packages for optimizers
if (!require('optimx')) install.packages('optimx'); library(optimx)
if (!require('parallel')) install.packages('parallel'); library(parallel)
if (!require('minqa')) install.packages('minqa'); library(minqa)
if (!require('lme4')) install.packages('lme4'); library(lme4) # for mixed models
if (!require('segmented')) install.packages('segmented'); library(segmented)
if (!require('dplyr')) install.packages('dplyr'); library(dplyr)
# https://cran.r-project.org/web/packages/segmented/segmented.pdf
# Read in Clean DF
df.clean <- add_time("complete_data_clean.csv")
df.clean <- add_coach_change(df.clean)
df.tourney <- add_time("tourney_data_clean.csv")
df.tourney <- add_coach_change(df.tourney)
# Check dimensions - len(unique schools) * len(unique years) must equal # of rows
dim_checker(df.clean)
dim_checker(df.tourney)
# since we know that games are increasing can we make those statistics into proportions to control
# for the specific effect
get_newprop = cbind(df.tourney$School, get_prop_df(df.tourney))
get_newprop
View(get_newprop)
