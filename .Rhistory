p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", col = '#EE3838', se = F)
cols <- c("Simple OLS"='#EE3838',"Segmented OLS"='#78C4D4')
p <- p + geom_line(data = my.model, aes(x = year, y = X3PAr))
p <- p + scale_colour_manual(name="Model Type",values=cols)  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
#ylim(c(0,0.6)) +
theme_hodp()
p
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", col = '#EE3838', se = F) +
geom_line(data = my.model, aes(x = year, y = X3PAr), color = '#78C4D4') +
scale_colour_manual(name="Model Type",values=cols)  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
#ylim(c(0,0.6)) +
theme_hodp()
p
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", col = '#EE3838', se = F) +
geom_line(data = my.model, aes(x = year, y = X3PAr), color = '#78C4D4', linetype = "solid") +
scale_colour_manual(name="Model Type",values=cols)  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
#ylim(c(0,0.6)) +
theme_hodp()
p
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", col = '#EE3838', se = F,size=10) +
geom_line(data = my.model, aes(x = year, y = X3PAr), color = '#78C4D4', linetype = "solid") +
scale_colour_manual(name="Model Type",values=cols)  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
#ylim(c(0,0.6)) +
theme_hodp()
p
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", col = '#EE3838', se = F,size=.1) +
geom_line(data = my.model, aes(x = year, y = X3PAr), color = '#78C4D4', linetype = "solid") +
scale_colour_manual(name="Model Type",values=cols)  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
#ylim(c(0,0.6)) +
theme_hodp()
# Replot things
cols <- c("Simple OLS"='#EE3838',"Segmented OLS"='#78C4D4')
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", col = '#EE3838', se = F,size=.1) +
geom_line(data = my.model, aes(x = year, y = X3PAr),
color = '#78C4D4', linetype = "solid", size=.1) +
scale_colour_manual(name="Model Type",values=cols)  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
#ylim(c(0,0.6)) +
theme_hodp()
p
# Replot things
cols <- c("Simple OLS"='#EE3838',"Segmented OLS"='#78C4D4')
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", col = '#EE3838', se = F,size=1) +
geom_line(data = my.model, aes(x = year, y = X3PAr),
color = '#78C4D4', linetype = "solid", size=1) +
scale_colour_manual(name="Model Type",values=cols)  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
#ylim(c(0,0.6)) +
theme_hodp()
p
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", col = '#EE3838', se = F,size=1) +
geom_line(data = my.model, aes(x = year, y = X3PAr),
color = '#78C4D4', linetype = "solid", size=1) +
scale_colour_manual(name="Model Type",values=cols, guide = guide_legend(fill = NULL,colour = NULL))  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
#ylim(c(0,0.6)) +
theme_hodp()
p
# Replot things
cols <- c("Simple OLS"='#EE3838',"Segmented OLS"='#78C4D4')
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", col = '#EE3838', se = F,size=1) +
geom_line(data = my.model, aes(x = year, y = X3PAr,color = '#78C4D4'),
linetype = "solid", size=1) +
scale_colour_manual(name="Model Type",values=cols, guide = guide_legend(fill = NULL,colour = NULL))  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
#ylim(c(0,0.6)) +
theme_hodp()
p
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", col = '#EE3838', se = F,size=1) +
geom_line(data = my.model, aes(x = year, y = X3PAr),
color = '#78C4D4', linetype = "solid", size=1) +
scale_colour_manual(name="Model Type",values=cols, guide = guide_legend(fill = NULL,colour = NULL))  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
#ylim(c(0,0.6)) +
theme_hodp()
p
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", aes(col = '#EE3838'), se = F,size=1) +
geom_line(data = my.model, aes(x = year, y = X3PAr),
aes(color = '#78C4D4'), linetype = "solid", size=1) +
scale_colour_manual(name="Model Type",
values=cols)  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
theme_hodp()
p
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", aes(col = '#EE3838'), se = F,size=1) +
geom_line(data = my.model, aes(x = year, y = X3PAr, color = '#78C4D4'),
linetype = "solid", size=1) +
scale_colour_identity(name="Model Type",
breaks = c('#EE3838','#78C4D4'),
labels = c("Simple OLS", "Segmented OLS"),
guide = "legend")  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
theme_hodp()
p
# Let's try to find segements using psi = NA
# This will iteratively try to find breakpoints though its likely to overestimate
# the appropriate number
seg5 <- segmented(lm1,
seg.Z = ~ time,
psi = NA)
# Let's try to find segements using psi = NA
# This will iteratively try to find breakpoints though its likely to overestimate
# the appropriate number
seg5 <- segmented(lm1,
seg.Z = ~ time,
psi = NA)
summary(seg5)
pscore.test(seg4, ~time)
# VERY LIKELY TO HAVE A BREAKPOINT
pscore.test(seg4, ~time, more.break = T)
davies.test(seg4, ~time)
# Let's try to find segements using psi = NA
# This will iteratively try to find breakpoints though its likely to overestimate
# the appropriate number
seg5 <- segmented(lm1,
seg.Z = ~ time,
psi = NA)
summary(seg5)
# Let's try to find segements using psi = NA
# This will iteratively try to find breakpoints though its likely to overestimate
# the appropriate number
seg5 <- segmented(lm1,
seg.Z = ~ time,
psi = NA)
2008-2003
# Let's try to find segements using psi = NA
# This will iteratively try to find breakpoints though its likely to overestimate
# the appropriate number
seg5 <- segmented(lm1,
seg.Z = ~ time,
psi = c(5,10))
summary(seg5)
df.tourney$X3PAr * df.tourney$FGA
### Test for BREAKPOINT
davies.test(lm1, ~time)
# Check for existence of one breakpoint using the pscore.test command
pscore.test(lm1, ~time)
davies.test(lm1, ~time)$
?davies.test
davies.test(lm1, ~time)$
?davies.test
?davies.test
davies.test(lm1, ~time)$parameter
davies.test(seg4, ~time)
### Test for Breakpoints
davies.test(lm1, ~time)
seg4 <- segmented(lm1,
seg.Z = ~ time,
psi = list(time = c(9.5)))
seg6 <- segmented(lm1,
seg.Z = ~ time,
psi = list(time = c(9.5)))
# have to provide estimates for breakpoints.
# apriori guess of 10 based on Curry 2015 MVP season
seg4 <- segmented(lm1,
seg.Z = ~ time,
psi = list(time = c(10)))
summary(seg4)
seg6 <- segmented(lm1,
seg.Z = ~ time,
psi = list(time = c(9.5)))
davies.test(seg4, ~time)
seg7 <- segmented(lm1,
seg.Z = ~ time,
psi = list(time = c(3.5, 9.5)))
davies.test(seg7, ~time)
2003 + 3
2003+10
# Then another, more significant breakpoint between 2012-2013 and 2013-2014 seasons
# Curry sets record for NBA 3's in 2012-13
# get breakpoints
seg7$psi
# get the slopes
slope(seg7)
# get the fitted data
my.fitted <- fitted(seg7)
my.model <- data.frame(year = df.tourney$year, X3PAr = my.fitted)
# plot the fitted model
ggplot(my.model, aes(x = year, y = X3PAr)) + geom_line()
seg7 <- segmented(lm1,
seg.Z = ~ time,
psi = list(time = c(3, 9)))
davies.test(seg7, ~time)
# Then another, more significant breakpoint between 2012-2013 and 2013-2014 seasons
# Curry sets record for NBA 3's in 2012-13
# get breakpoints
seg7$psi
# get the slopes
slope(seg7)
# get the fitted data
my.fitted <- fitted(seg7)
my.model <- data.frame(year = df.tourney$year, X3PAr = my.fitted)
# plot the fitted model
ggplot(my.model, aes(x = year, y = X3PAr)) + geom_line()
### Test for Breakpoints
davies.test(lm1, ~time)
seg6 <- segmented(lm1,
seg.Z = ~ time,
psi = list(time = c(9.3)))
davies.test(seg4, ~time)
seg7 <- segmented(lm1,
seg.Z = ~ time,
psi = list(time = c(3.1, 9.3)))
davies.test(seg7, ~time)
# Then another, more significant breakpoint between 2012-2013 and 2013-2014 seasons
# Curry sets record for NBA 3's in 2012-13
# get breakpoints
seg7$psi
# Then another, more significant breakpoint between 2012-2013 and 2013-2014 seasons
# Curry sets record for NBA 3's in 2012-13
# get breakpoints
seg7$psi
# get the slopes
slope(seg7)
# get the fitted data
my.fitted <- fitted(seg7)
my.model <- data.frame(year = df.tourney$year, X3PAr = my.fitted)
# Then another, more significant breakpoint between 2012-2013 and 2013-2014 seasons
# Curry sets record for NBA 3's in 2012-13
# get breakpoints
seg7$psi
# get the slopes
slope(seg7)
# get the fitted data
seg7.fitted <- fitted(seg7)
seg7.fitted.df <- data.frame(year = df.tourney$year, X3PAr = my.fitted)
# plot the fitted model
ggplot(seg7.fitted.df, aes(x = year, y = X3PAr)) + geom_line()
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", aes(col = '#EE3838'), se = F,size=1) +
geom_line(data = my.model, aes(x = year, y = X3PAr, color = '#78C4D4'),
linetype = "solid", size=1) +
scale_colour_identity(name="Model Type",
breaks = c('#EE3838','#78C4D4'),
labels = c("Simple OLS", "Segmented OLS"),
guide = "legend")  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
theme_hodp()
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", aes(col = '#EE3838'), se = F,size=1) +
geom_line(data = seg7.fitted.df, aes(x = year, y = X3PAr, color = '#78C4D4'),
linetype = "solid", size=1) +
scale_colour_identity(name="Model Type",
breaks = c('#EE3838','#78C4D4'),
labels = c("Simple OLS", "Segmented OLS"),
guide = "legend")  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
theme_hodp()
p
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", aes(col = '#EE3838'), se = F,size=1) +
geom_line(data = seg7.fitted.df, aes(x = year, y = X3PAr, color = '#78C4D4'),
linetype = "solid", size=1) +
scale_colour_identity(name="Model Type",
breaks = c('#EE3838','#78C4D4'),
labels = c("Simple OLS", "Segmented OLS: 2 breaks"),
guide = "legend")  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
theme_hodp()
p
fitted(seg7)
seg7.fitted.df
View(seg7.fitted.df)
# Jess, Anna and Seth Project
# 11/29/19
source('styleguide.R')
source('helpers.R')
# Packages for optimizers
if (!require('optimx')) install.packages('optimx'); library(optimx)
if (!require('parallel')) install.packages('parallel'); library(parallel)
if (!require('minqa')) install.packages('minqa'); library(minqa)
if (!require('lme4')) install.packages('lme4'); library(lme4) # for mixed models
if (!require('segmented')) install.packages('segmented'); library(segmented)
df.clean <- add_time("complete_data_clean.csv")
df.tourney <- add_time("tourney_data_clean.csv")
# Check dimensions - len(unique schools) * len(unique years) must equal # of rows
dim_checker(df.clean)
dim_checker(df.tourney)
# Let's have X3PAr be our response
# Check assumption of normal distribution
p <- ggplot(df.tourney, aes(x=X3PAr)) +
geom_histogram(colour="black", fill='#EE3838') +
labs(title="3PAr Histogram") +
xlab("3PAr") +
ylab("Counts") +
theme_hodp()
dim_checker(df.tourney)
# Let's have X3PAr be our response
# Check assumption of normal distribution
p <- ggplot(df.tourney, aes(x=X3PAr)) +
geom_histogram(colour="black", fill='#EE3838') +
labs(title="3PAr Histogram") +
xlab("3PAr") +
ylab("Counts") +
theme_hodp()
p
# Model 1: pool all teams together, OLS model for 3PAr change over time
lm1 <- lm(X3PAr ~ time, df.tourney)
summary(lm1)
names(df.clean)
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", col = '#EE3838', se = F) +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
#ylim(c(0,0.6)) +
theme_hodp()
p
# Model 2: Mixed Model, fixed effect of time
lmer2 <- lmer(X3PAr ~ time + (1 | School), data=df.tourney)
summary(lmer2)
coef(summary(lmer2))
coef(lmer2)$School
### Fitting a random slopes, random intercepts model is often failing to converge
lmer3 <- lmer(X3PAr ~ time + (1|School) + (time|School), data=df.tourney)
# list of convergence failures...
lmer3a <- update(lmer3,
REML = FALSE,
control = lmerControl(
optimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
lmer3b <- update(lmer3,
control=lmerControl(optCtrl=list(ftol_abs=1e-8,xtol_abs=1e-8)))
# Model 2: Mixed Model, fixed effect of time
lmer2 <- lmer(X3PAr ~ time + (1 | School), data=df.tourney)
summary(lmer2)
coef(summary(lmer2))
coef(lmer2)$School
### Fitting a random slopes, random intercepts model is often failing to converge
lmer3 <- lmer(X3PAr ~ time + (1|School) + (time|School), data=df.tourney)
# list of convergence failures...
lmer3a <- update(lmer3,
REML = FALSE,
control = lmerControl(
optimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
lmer3b <- update(lmer3,
control=lmerControl(optCtrl=list(ftol_abs=1e-8,xtol_abs=1e-8)))
lmer3c <- update(lmer3, control=lmerControl(optimizer="bobyqa"))
# Use all fit to find a model that converges
# Source: https://joshua-nugent.github.io/allFit/
ncores <- detectCores()
diff_optims <- allFit(lmer3, maxfun = 1e6, parallel = 'multicore', ncpus = ncores)
is.OK <- sapply(diff_optims, is, "merMod")
diff_optims.OK <- diff_optims[is.OK]
lapply(diff_optims.OK,function(x) x@optinfo$conv$lme4$messages)
### Nelder_Mead converges successfully!!! - but only for the df.tourney
lmer3d <- update(lmer3, control=lmerControl(optimizer="Nelder_Mead"))
# Summary
summary(lmer3d)
### COMPARE
# Fixed coefs
coef(summary(lmer2))
coef(summary(lmer3d))
# Look at differences b/w individual schools coefs
coef(lmer2)$School
coef(lmer3d)$School
head(coef(lmer3d)$School)
head(coef(lmer2)$School)
head(coef(lmer3d)$School)
# Unsurprisingly, our random slopes and intercepts model is significantly better than
# our simple random intercepts model. It may be even more overfit though.
anova(lmer2,lmer3)
# Unsurprisingly, our random slopes and intercepts model is significantly better than
# our simple random intercepts model. It may be even more overfit though.
anova(lmer2,lmer3d)
### Let's do some plots
# Get coefficients
year <- 2003:2017
intercept.mm <- summary(lmer3d)$coef[1,1]
slope.mm <- summary(lmer3d)$coef[2,1]
lmer3fn <- function(year) {
return(intercept.mm + (year - 2003) * slope.mm)
}
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", col = '#EE3838', se = F) +
geom_segment(aes(x = 2003, y = lmer3fn(2003), xend = 2017, yend = lmer3fn(2017), colour = "yellow"),
data = df.tourney) +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
#ylim(c(0,0.6)) +
theme_hodp()
p
### SEGMENTED REGRESSION ###
# Using the segmented package
# have to provide estimates for breakpoints.
# apriori guess of 10 based on Curry 2015 MVP season
seg4 <- segmented(lm1,
seg.Z = ~ time,
psi = list(time = c(10)))
summary(seg4)
# display the summary
summary(seg4)
### SEGMENTED REGRESSION ###
# Using the segmented package
# have to provide estimates for breakpoints.
# apriori guess of 10 based on Curry 2015 MVP season,
seg4 <- segmented(lm1,
seg.Z = ~ time,
psi = list(time = c(10)))
summary(seg4)
# display the summary
summary(seg4)
# get breakpoints
seg4$psi
# get the slopes
slope(seg4)
# get the fitted data
my.fitted <- fitted(seg4)
my.model <- data.frame(year = df.tourney$year, X3PAr = my.fitted)
# plot the fitted model
ggplot(my.model, aes(x = year, y = X3PAr)) + geom_line()
# Replot things
cols <- c("Simple OLS"='#EE3838',"Segmented OLS"='#78C4D4')
p <- ggplot(df.tourney, aes(x = time + 2003, y = X3PAr)) +
geom_point() +
stat_smooth(method = "lm", aes(col = '#EE3838'), se = F,size=1) +
geom_line(data = my.model, aes(x = year, y = X3PAr, color = '#78C4D4'),
linetype = "solid", size=1) +
scale_colour_identity(name="Model Type",
breaks = c('#EE3838','#78C4D4'),
labels = c("Simple OLS", "Segmented OLS break between 9 and 10"),
guide = "legend")  +
labs(title="3PAr Over Time - Pooled") +
xlab("Year") +
ylab("3PAr") +
theme_hodp()
p
# Let's try to find segements using psi = NA
# This will iteratively try to find breakpoints though its likely to overestimate
# the appropriate number
seg5 <- segmented(lm1,
seg.Z = ~ time,
psi = c(5,10))
summary(seg5)
# Let's try to find segements using psi = NA
# This will iteratively try to find breakpoints though its likely to overestimate
# the appropriate number
seg5 <- segmented(lm1,
seg.Z = ~ time,
psi = c(5,10))
summary(seg5)
# Let's try to find segements using psi = NA
# This will iteratively try to find breakpoints though its likely to overestimate
# the appropriate number
seg5 <- segmented(lm1,
seg.Z = ~ time,
psi = c(3,10))
summary(seg5)
